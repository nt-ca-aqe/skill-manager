type Employee {
    id: ID!
    firstName: String!
    lastName: String!
    title: String!
    email: String!
    telephone: String!
    description: String
    academicDegrees: [AcademicDegree]
    certifications: [String]
    publications: [String]
    languages: [LanguageProficiency]
    jobHistory: [Job]
    skills: [SkillKnowledge]
    projects: [ProjectAssignment]
}

type AcademicDegree {
    subject: String!
    title: String!
    institution: String!
}

type LanguageProficiency {
    language: String!
    qualifier: String!
}

type Job {
    employer: String!
    title: String!
    start: String!
    end: String
}

type SkillKnowledge {
    skill: SkillData!
    level: Int!
    secret: Boolean!
}

type SkillData {
    id: String!
    label: String!
}

type ProjectAssignment {
    id: String!
    project: ProjectData!
    contribution: String!
    startDate: String!
    endDate: String
}

type ProjectData {
    id: String!
    label: String!
    description: String!
}

type EmployeesPage {
    content: [Employee]!
    pageIndex: Int!
    pageSize: Int!
    totalElements: Int!
    hasPrevious: Boolean!
    hasNext: Boolean!
}

extend type Query {
    getEmployeeById(id: ID!): Employee
    getEmployeesPage(pagination: Pagination): EmployeesPage!
    searchEmployees(query: String!, pagination: Pagination): EmployeesPage!
    suggestEmployees(input: String!, max: Int): [Suggestion]!
}

input EmployeeInput {
    firstName: String!
    lastName: String!
    title: String!
    email: String!
    telephone: String!
}

extend type Mutation {
    createEmployee(input: EmployeeInput) : Employee!
    deleteEmployeeById(id: ID!) : Boolean!
}
